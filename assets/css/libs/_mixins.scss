// ------------------------------------------------------------
// Mixins
// ------------------------------------------------------------


// -------------------------------------------------------
// List styles
// -------------------------------------------------------


// Font-sizing

@mixin fontsize($size:1.6, $line: $size * 1.5){
		font-size:   ($size * 10) + px;
		line-height: ($line * 10) + px;
		font-size:   $size + rem;
	line-height: $line + rem;
}

// Mixins for list style types
@mixin unordered {
	 list-style-position: outside; 
	 list-style-type: disc;
}

@mixin unordered-inside {
	 list-style-position: inside; 
	 list-style-type: disc;
}

@mixin ordered {
	list-style-position: outside; 
	list-style-type: decimal;
}

@mixin ordered-inside {
	list-style-position: inside; 
	list-style-type: decimal;
}

@mixin nobullet {
	list-style-type: none;
}

// -------------------------------------------------------
// Transitions
// -------------------------------------------------------

@mixin _transition($prop:all, $duration:0.2s, $timing:ease-in-out, $delay:0s) {
	@include transition($prop $duration $timing $delay);
}



// -------------------------------------------------------
// Link hover styles
// -------------------------------------------------------

@mixin link-active-styles {
	&:hover, &:focus, &:active {
		@content; 
	}
}
	
	
// -------------------------------------------------------
// Align things vertically (http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/)
// -------------------------------------------------------

@mixin vertical-align {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}


// -------------------------------------------------------
// Media queries
// -------------------------------------------------------


// Reference widths from settings file
@mixin respond-to($media-min, $IE9: true) {
		@if $IE9 == true {
				.lt-ie9 & {
						@content;
				}
				@media screen and (min-width: $media-min)  {
						@content;
				}
		}
		@else {
				@media screen and (min-width: $media-min) {
						@content;
				}
		}
}

@mixin respond-to-max($media-max, $IE9: true) {
		@if $IE9 == true {
				.lt-ie9 & {
						@content;
				}
				@media screen and (max-width: $media-max - 1px)  {
						@content;
				}
		}
		@else {
				@media screen and (max-width: $media-max - 1px) {
						@content;
				}
		}
}


@mixin respond-to-min-max($media-min, $media-max, $IE9: true) {
		@if $IE9 == true {
				.lt-ie9 & {
						@content;
				}
				@media screen and (min-width: $media-min) and (max-width: $media-max)  {
						@content;
				}
		}
		@else {
				 @media screen and (min-width: $media-min) and (max-width: $media-max) {
						@content;
				}
		}
}


// -------------------------------------------------------
// Retina images
// -------------------------------------------------------

// Usage: Send path, image name, and width and height. 
// Name retina images [name]2x.

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
				 (-o-min-device-pixel-ratio: 2.6/2),
				 (-webkit-min-device-pixel-ratio: 1.3),
				 (min-device-pixel-ratio: 1.3),
				 (min-resolution: 1.3dppx) {
		/* on retina, use image that's scaled by 2 */
		background-image: url($image);
		background-size: $width $height;
	}
}

// -------------------------------------------------------
// HEX to RGB
// -------------------------------------------------------

// http://codepen.io/sturobson/pen/hdKyv
@mixin rgba($color, $value) {
	background-color: $color;
	background-color: rgba($color, $value);
}


// -------------------------------------------------------
// Rem
// -------------------------------------------------------


@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

@mixin rem($property, $values) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$pxValues: #{$pxValues + $value*16}px;

		@if $i < $max {
			$pxValues: #{$pxValues + " "};
		}
	} 

	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$remValues: #{$remValues + $value}rem;

		@if $i < $max {
			$remValues: #{$remValues + " "};
		}
	} 
	
	#{$property}: $pxValues; 
	#{$property}: $remValues; 
}


// -------------------------------------------------------
// Kerning
// -------------------------------------------------------

@mixin kerning($value) {
		letter-spacing: ($value / 1000) + em;
}


// -------------------------------------------------------
// Link interaction
// -------------------------------------------------------

@mixin link-interaction($color) {
	display: inline-block;
	text-decoration: none;
	&:after {
		content: '';
		display: block;
		width: 0;
		height: 2px;
		background-color: $color;
		@include transition(all .2s ease);
	}
	&:hover {
		color: $color;
		&:after {
			width: 100%;
		}
	}
}